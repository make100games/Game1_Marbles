//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Input/GameInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInput"",
    ""maps"": [
        {
            ""name"": ""Game"",
            ""id"": ""940a3553-c6ae-4c96-b931-0b7b30193048"",
            ""actions"": [
                {
                    ""name"": ""StartMovingLeft"",
                    ""type"": ""Button"",
                    ""id"": ""d74b9c6f-e615-4102-b9cd-4d0f56fc4f24"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""StopMovingLeft"",
                    ""type"": ""Button"",
                    ""id"": ""2c54033f-2af4-48e7-a4e7-dd53c63591ea"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""StartMovingRight"",
                    ""type"": ""Button"",
                    ""id"": ""5a812ee9-7d8d-4920-8653-bf6ec345a913"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""StopMovingRight"",
                    ""type"": ""Button"",
                    ""id"": ""8073ecc4-47d1-424f-b5b1-ab8791dd34c6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftBarrelRoll"",
                    ""type"": ""Button"",
                    ""id"": ""e3b45052-aa77-4e92-aa41-ae61b3eeae2c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightBarrelRoll"",
                    ""type"": ""Button"",
                    ""id"": ""18ca3511-79cf-486c-8807-3a50612dbc51"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleBoost"",
                    ""type"": ""Button"",
                    ""id"": ""a9ed0e65-68b6-481a-8b09-3ed12918a2fe"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fb956261-9e0e-4944-9fc4-d4804de08843"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StartMovingLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a99d1316-c349-48ee-b4ae-60ca64fd49b5"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StopMovingLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""70f627ed-0675-454e-8331-bc4d57a64aca"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StartMovingRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""80f98e27-a2bf-4f3b-aba1-9de77c0d2f20"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StopMovingRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2bb162f3-aa6c-4b30-9701-68b7704aa58c"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": ""MultiTap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftBarrelRoll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""769de1c7-fe50-459c-b281-eb876ccddddf"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": ""MultiTap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightBarrelRoll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a673dd0b-800e-4853-a563-e12bec7db1c9"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleBoost"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Game
        m_Game = asset.FindActionMap("Game", throwIfNotFound: true);
        m_Game_StartMovingLeft = m_Game.FindAction("StartMovingLeft", throwIfNotFound: true);
        m_Game_StopMovingLeft = m_Game.FindAction("StopMovingLeft", throwIfNotFound: true);
        m_Game_StartMovingRight = m_Game.FindAction("StartMovingRight", throwIfNotFound: true);
        m_Game_StopMovingRight = m_Game.FindAction("StopMovingRight", throwIfNotFound: true);
        m_Game_LeftBarrelRoll = m_Game.FindAction("LeftBarrelRoll", throwIfNotFound: true);
        m_Game_RightBarrelRoll = m_Game.FindAction("RightBarrelRoll", throwIfNotFound: true);
        m_Game_ToggleBoost = m_Game.FindAction("ToggleBoost", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Game
    private readonly InputActionMap m_Game;
    private List<IGameActions> m_GameActionsCallbackInterfaces = new List<IGameActions>();
    private readonly InputAction m_Game_StartMovingLeft;
    private readonly InputAction m_Game_StopMovingLeft;
    private readonly InputAction m_Game_StartMovingRight;
    private readonly InputAction m_Game_StopMovingRight;
    private readonly InputAction m_Game_LeftBarrelRoll;
    private readonly InputAction m_Game_RightBarrelRoll;
    private readonly InputAction m_Game_ToggleBoost;
    public struct GameActions
    {
        private @GameInput m_Wrapper;
        public GameActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @StartMovingLeft => m_Wrapper.m_Game_StartMovingLeft;
        public InputAction @StopMovingLeft => m_Wrapper.m_Game_StopMovingLeft;
        public InputAction @StartMovingRight => m_Wrapper.m_Game_StartMovingRight;
        public InputAction @StopMovingRight => m_Wrapper.m_Game_StopMovingRight;
        public InputAction @LeftBarrelRoll => m_Wrapper.m_Game_LeftBarrelRoll;
        public InputAction @RightBarrelRoll => m_Wrapper.m_Game_RightBarrelRoll;
        public InputAction @ToggleBoost => m_Wrapper.m_Game_ToggleBoost;
        public InputActionMap Get() { return m_Wrapper.m_Game; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameActions set) { return set.Get(); }
        public void AddCallbacks(IGameActions instance)
        {
            if (instance == null || m_Wrapper.m_GameActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameActionsCallbackInterfaces.Add(instance);
            @StartMovingLeft.started += instance.OnStartMovingLeft;
            @StartMovingLeft.performed += instance.OnStartMovingLeft;
            @StartMovingLeft.canceled += instance.OnStartMovingLeft;
            @StopMovingLeft.started += instance.OnStopMovingLeft;
            @StopMovingLeft.performed += instance.OnStopMovingLeft;
            @StopMovingLeft.canceled += instance.OnStopMovingLeft;
            @StartMovingRight.started += instance.OnStartMovingRight;
            @StartMovingRight.performed += instance.OnStartMovingRight;
            @StartMovingRight.canceled += instance.OnStartMovingRight;
            @StopMovingRight.started += instance.OnStopMovingRight;
            @StopMovingRight.performed += instance.OnStopMovingRight;
            @StopMovingRight.canceled += instance.OnStopMovingRight;
            @LeftBarrelRoll.started += instance.OnLeftBarrelRoll;
            @LeftBarrelRoll.performed += instance.OnLeftBarrelRoll;
            @LeftBarrelRoll.canceled += instance.OnLeftBarrelRoll;
            @RightBarrelRoll.started += instance.OnRightBarrelRoll;
            @RightBarrelRoll.performed += instance.OnRightBarrelRoll;
            @RightBarrelRoll.canceled += instance.OnRightBarrelRoll;
            @ToggleBoost.started += instance.OnToggleBoost;
            @ToggleBoost.performed += instance.OnToggleBoost;
            @ToggleBoost.canceled += instance.OnToggleBoost;
        }

        private void UnregisterCallbacks(IGameActions instance)
        {
            @StartMovingLeft.started -= instance.OnStartMovingLeft;
            @StartMovingLeft.performed -= instance.OnStartMovingLeft;
            @StartMovingLeft.canceled -= instance.OnStartMovingLeft;
            @StopMovingLeft.started -= instance.OnStopMovingLeft;
            @StopMovingLeft.performed -= instance.OnStopMovingLeft;
            @StopMovingLeft.canceled -= instance.OnStopMovingLeft;
            @StartMovingRight.started -= instance.OnStartMovingRight;
            @StartMovingRight.performed -= instance.OnStartMovingRight;
            @StartMovingRight.canceled -= instance.OnStartMovingRight;
            @StopMovingRight.started -= instance.OnStopMovingRight;
            @StopMovingRight.performed -= instance.OnStopMovingRight;
            @StopMovingRight.canceled -= instance.OnStopMovingRight;
            @LeftBarrelRoll.started -= instance.OnLeftBarrelRoll;
            @LeftBarrelRoll.performed -= instance.OnLeftBarrelRoll;
            @LeftBarrelRoll.canceled -= instance.OnLeftBarrelRoll;
            @RightBarrelRoll.started -= instance.OnRightBarrelRoll;
            @RightBarrelRoll.performed -= instance.OnRightBarrelRoll;
            @RightBarrelRoll.canceled -= instance.OnRightBarrelRoll;
            @ToggleBoost.started -= instance.OnToggleBoost;
            @ToggleBoost.performed -= instance.OnToggleBoost;
            @ToggleBoost.canceled -= instance.OnToggleBoost;
        }

        public void RemoveCallbacks(IGameActions instance)
        {
            if (m_Wrapper.m_GameActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameActions instance)
        {
            foreach (var item in m_Wrapper.m_GameActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameActions @Game => new GameActions(this);
    public interface IGameActions
    {
        void OnStartMovingLeft(InputAction.CallbackContext context);
        void OnStopMovingLeft(InputAction.CallbackContext context);
        void OnStartMovingRight(InputAction.CallbackContext context);
        void OnStopMovingRight(InputAction.CallbackContext context);
        void OnLeftBarrelRoll(InputAction.CallbackContext context);
        void OnRightBarrelRoll(InputAction.CallbackContext context);
        void OnToggleBoost(InputAction.CallbackContext context);
    }
}
